apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: base-image-task
  namespace: mq
spec:
  params:
    # for git cli
    - default: >-
        docker.io/alpine/git:v2.26.2@sha256:23618034b0be9205d9cc0846eb711b12ba4c9b468efdd8a59aac1d7b1a23363f
      description: |
        The base image for the task.
      name: BASE_IMAGE
      type: string
    - description: The git script to run.
      name: GIT_SCRIPT
      type: string
    - description: git credential secret name
      name: GIT_SECRET
      type: string
    - default: /source
      name: source-dir
      type: string
    - name: subdirectory
      type: string
      # for buildah
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:99cae35f40c7ec050fed3765b2b27e0b8bbea2aa2da7c16408e2ca13c60ff8ee
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: "false"
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: "The format of the built container, oci or docker"
      name: FORMAT
      type: string
    - default: ""
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ""
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
    # for scan
    - name: SCAN_SECRET
      type: string
    # for oc cli
    - description: oopenshift credential secret name
      name: OCP_SECRET
      type: string
    - default: latest
      description: The OpenShift Version to use
      name: VERSION
      type: string
    - name: PROJECT
      description: namespace
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - name: git-cli
      image: $(params.BASE_IMAGE)
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.GIT_SECRET)
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.GIT_SECRET)
              key: username
              optional: true
        - name: GIT_EMAIL
          valueFrom:
            secretKeyRef:
              name: $(params.GIT_SECRET)
              key: email
              optional: true
      resources: {}
      script: |

        # Setting up the config for the git.
        pwd
        ls
        cd /source
        git config --global user.email "$GIT_EMAIL"
        git config --global user.name "$GIT_USERNAME"

        $(params.GIT_SCRIPT)

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        ls
        cd $(params.subdirectory)
        ls
        pwd
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /source
          name: source
      workingDir: $(params.source-dir)
    - name: build
      image: $(params.BUILDER_IMAGE)
      resources: {}
      script: |
        pwd
        ls
        cd $(params.subdirectory)
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /source
          name: source
      workingDir: $(params.source-dir)
    # - name: scan
    #   image: snyk/snyk-cli:docker
    #   resources: {}
    #   env:
    #     - name: SCAN_PASSWORD
    #       valueFrom:
    #         secretKeyRef:
    #           name: $(params.SCAN_SECRET)
    #           key: password
    #           optional: true
    #     - name: SCAN_USERNAME
    #       valueFrom:
    #         secretKeyRef:
    #           name: $(params.SCAN_SECRET)
    #           key: username
    #           optional: true
    #   script: |
    #     ls
    #     cd $(params.subdirectory)
    #     docker scan $(params.IMAGE)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /source
          name: source
      workingDir: $(params.source-dir)
    - image: $(params.BUILDER_IMAGE)
      name: push
      resources: {}
      script: |
        ls
        cd $(params.subdirectory)
        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(params.source-dir)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /source
          name: source
      workingDir: $(params.source-dir)
    - image: $(params.BUILDER_IMAGE)
      name: digest-to-results
      resources: {}
      script: >-
        cat $(params.source-dir)/image-digest | tee
        /tekton/results/IMAGE_DIGEST
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /source
          name: source
      workingDir: $(params.source-dir)

  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: source
# oc create secret generic image-scan-credentials --from-literal=username=user;password=pass;server=docker.io

# ocp step
# - image: >-
#     image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
#   name: oc
#   env:
#     - name: OCP_USER
#       valueFrom:
#         secretKeyRef:
#           name: $(params.OCP_SECRET)
#           key: username
#           optional: true
#     - name: OCP_PASSWORD
#       valueFrom:
#         secretKeyRef:
#           name: $(params.OCP_SECRET)
#           key: password
#     - name: OCP_SERVER
#       valueFrom:
#         secretKeyRef:
#           name: $(params.OCP_SECRET)
#           key: server
#   resources: {}
#   script: |
#     ls
#     cd $(params.subdirectory)
#     #!/usr/bin/env bash

#     # [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
#     # cd $(workspaces.manifest-dir.path)

#     # [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
#     # [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
#     # export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

#     unset KUBECONFIG
#     oc login --token=$OCP_PASSWORD --server=$OCP_SERVER
#     # oc login $OCP_SERVER -u $OCP_USER -p $OCP_PASSWORD
#     oc project $(params.PROJECT)
#     oc apply -f $(params.QM_YAML)
#   volumeMounts:
#     - mountPath: /var/lib/containers
#       name: varlibcontainers
#     - mountPath: /source
#       name: source
#   workingDir: $(params.source-dir)
