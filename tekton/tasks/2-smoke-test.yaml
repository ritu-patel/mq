apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: smoke-test-dev
  namespace: mq
spec:
  params:
    - name: source-dir
    - name: app-namespace
    - name: app-name
    - name: tools-image
    - name: subdirectory
  volumes:
    - name: source
      persistentVolumeClaim:
        claimName: tekton-pvc
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - image: $(params.tools-image)
      name: deploy
      resources: {}
      script: >
        #!/usr/bin/env bash

        ls 


        cd $(params.subdirectory)


        set -ex


        APP_NAMESPACE="$(params.app-namespace)"


        APP_NAME="$(params.app-name)"


        cat release.yaml


        echo -e "Deploying into: ${APP_NAMESPACE}/${APP_NAME}"


        kubectl apply -n ${APP_NAMESPACE} -f release.yaml --validate=false


        echo "Sleep before test to make sure QMGR is up"


        sleep 60

      workingDir: $(params.source-dir)
    - image: $(params.tools-image)
      name: health-check
      resources: {}
      script: >
        #!/usr/bin/env bash

        ls

        set -x


        RELEASE_NAME=$(params.app-name)


        podname=$(kubectl get pods --selector=app.kubernetes.io/instance=$RELEASE_NAME -o custom-columns=POD:.metadata.name --no-headers | head -n 1)


        echo "podname: $podname"


        queue="QM1"


        echo "Sleep before test to make sure QMGR is up"


        sleep 30


        echo "Print the queue details: ..."


        echo ""


        kubectl exec $podname -- /bin/bash -c "echo \"define qlocal($queue)
        replace\" | runmqsc "



        echo "Print the queue details: ..."


        echo ""



        kubectl exec $podname -- /bin/bash -c "echo \"DISPLAY QL($queue) ALL\" |
        runmqsc" > checkQ.txt 2>&1


        cat checkQ.txt


        if grep -q "QUEUE($queue)" checkQ.txt; then
          echo "Queue has been successfully created."
        else
          exit 1
        fi

        # put message on queue

        kubectl exec $podname -- /bin/bash -c "echo \"hello-world\" |
        /opt/mqm/samp/bin/amqsput $queue" > putMessage.txt 2>&1



        cat putMessage.txt


        echo "----------"


        fail="reason code"


        if grep -q "$fail" putMessage.txt; then
          exit 1
        else
          echo "Message has been successfully put the queue."
        fi


        # get message on queue

        kubectl exec $podname  -c qmgr -- /opt/mqm/samp/bin/amqsget $queue >
        getMessage.txt 2>&1


        cat getMessage.txt


        if grep -q "hello-world" getMessage.txt; then
            echo "Message has been found on the queue."
        else
            echo "Error: Message has not been retrieved from the queue."
            exit 1
        fi
      workingDir: $(params.source-dir)
